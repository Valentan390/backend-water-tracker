{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "Water Tracker",
    "description": "Showing documentation of Water Tracker app"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [{ "url": "http://localhost:3001" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "Users endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    }
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Body must have fields",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "409": {
            "description": "Email already used",
            "content": {}
          }
        }
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Body must have fields",
            "content": {}
          },
          "401": {
            "description": "Email or password invalid",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found | "
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user data",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          }
        }
      }
    },
    "/api/users/avatars": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user avatars",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's avatar",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "example_username12345"
                    },
                    "avatarURL": {
                      "type": "string",
                      "format": "uri",
                      "example": "example_avatar.png",
                      "description": "URL of the user's avatar"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          }
        }
      }
    },
    "/api/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's new information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request | Body must have fields | Old password is incorrect"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/users/dailynorm": {
      "patch": {
        "tags": ["User"],
        "summary": "Update the daily water intake norm",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Your new daily water intake norm in format string",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDailyNormaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDailyNormaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request | Body must have fields"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined "
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/waters/": {
      "post": {
        "tags": ["Water"],
        "summary": "Post water intake",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Your new daily water intake norm in format string",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostWaterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request | Body must have fields"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined "
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["username", "email", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's username",
            "example": "username12345",
            "minLength": 3
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "pass12345",
            "minLength": 8,
            "maxLength": 64
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's username",
            "example": "username12345"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "SignInRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "pass12345",
            "minLength": 8,
            "maxLength": 64
          }
        }
      },
      "SignInResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token for authentication"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "username": {
                "type": "string",
                "description": "User's username",
                "example": "example_username12345"
              },
              "avatarURL": {
                "type": "string",
                "description": "URL of the user's avatar",
                "example": "example_avatar.png"
              },
              "dailyNorma": {
                "type": "number",
                "description": "User's daily norma",
                "example": 100
              },
              "gender": {
                "type": "string",
                "description": "User's gender",
                "example": "woman"
              }
            }
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Signout succes"
          }
        }
      },
      "GetCurrentResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's username",
            "example": "example_username12345"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "URL of the user's avatar",
            "example": "example_avatar.png"
          },
          "dailyNorma": {
            "type": "number",
            "description": "User's daily norma",
            "example": 100
          },
          "gender": {
            "type": "string",
            "description": "User's gender",
            "example": "woman",
            "enum": ["woman", "man"]
          }
        }
      },
      "UpdateAvatarRequest": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "New username",
            "example": "new_example1234",
            "minLength": 3
          },
          "email": {
            "type": "string",
            "description": "New email",
            "format": "email"
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "minLength": 8,
            "maxLength": 64
          },
          "oldPassword": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64
          },
          "gender": {
            "type": "string",
            "description": "New gender",
            "enum": ["woman", "man"]
          }
        }
      },
      "UserUpdateResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "username": {
            "type": "string",
            "example": "example_username12345",
            "description": "User's username"
          },
          "avatarURL": {
            "type": "string",
            "description": "URL of the user's avatar",
            "example": "example_avatar.png"
          },
          "dailyNorma": {
            "type": "number",
            "description": "User's daily norma",
            "example": 100
          },
          "gender": {
            "type": "string",
            "enum": ["woman", "man"],
            "description": "User's gender"
          }
        }
      },
      "UpdateDailyNormaRequest": {
        "type": "object",
        "properties": {
          "dailyNorma": {
            "type": "number",
            "description": "User's daily norma",
            "example": 200,
            "minimum": 1,
            "maximum": 1500
          }
        }
      },
      "UpdateDailyNormaResponse": {
        "type": "object",
        "properties": {
          "dailyNorma": {
            "type": "number",
            "example": 200
          }
        }
      },
      "PostWaterRequest": {
        "type": "object",
        "properties": {
          "milliliters": {
            "type": "string",
            "example": 200
          },
          "time": {
            "type": "string",
            "example": 200
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
