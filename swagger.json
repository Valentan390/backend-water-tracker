{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "Water Tracker",
    "description": "Showing documentation of Water Tracker app"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [{ "url": "https://backend-water-tracker.onrender.com" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "Users endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    }
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Body must have fields",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "409": {
            "description": "Email already used",
            "content": {}
          }
        }
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Body must have fields",
            "content": {}
          },
          "401": {
            "description": "Email or password invalid",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found | "
          }
        }
      }
    },
    "/api/auth/restore-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Restore your password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User's email",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset link has been sent to your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Body must have fields"
          },
          "401": {
            "description": "Email or password invalid | Email not found"
          },
          "404": {
            "description": "Not found | User not found"
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset your password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["resetToken", "newPassword"],
                "properties": {
                  "resetToken": {
                    "type": "string",
                    "description": "Your reset token"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "User's new password",
                    "example": "pass12345",
                    "minLength": 8,
                    "maxLength": 64
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password has been reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Body must have fields | Invalid or expired token"
          },
          "401": {
            "description": "Email or password invalid | Email not found"
          },
          "404": {
            "description": "Not found | User not found"
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user data",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          }
        }
      }
    },
    "/api/users/avatars": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user avatars",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's avatar",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "example_username12345"
                    },
                    "avatarURL": {
                      "type": "string",
                      "format": "uri",
                      "example": "example_avatar.png",
                      "description": "URL of the user's avatar"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          }
        }
      }
    },
    "/api/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's new information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request | Body must have fields | Old password is incorrect"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/users/dailynorm": {
      "patch": {
        "tags": ["User"],
        "summary": "Update the daily water intake norm",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Your new daily water intake norm in format string",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDailyNormaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDailyNormaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request | Body must have fields"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined "
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/waters/userwaterday": {
      "get": {
        "tags": ["Water"],
        "summary": "Get amount of water consumed today",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWaterDayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error while performing aggregation in database"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found "
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/waters/userwatermonth/{year}/{month}": {
      "get": {
        "tags": ["Water"],
        "summary": "Get amount of consumed water for the selected month",
        "parameters": [
          {
            "in": "path",
            "name": "year",
            "required": true,
            "description": "Year in YYYY format",
            "type": "string"
          },
          {
            "in": "path",
            "name": "month",
            "required": true,
            "description": "The month of the water consumption data, in MM format",
            "type": "string"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserWaterMonthResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request | Incorrect year or month values | Error while performing aggregation in database"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/waters/": {
      "post": {
        "tags": ["Water"],
        "summary": "Add water data",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Adds water data for a user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddWaterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddWaterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request | Body must have fields"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          },
          "404": {
            "description": "Not Found | No data added"
          }
        }
      }
    },
    "/api/waters/{waterId}": {
      "patch": {
        "tags": ["Water"],
        "summary": "Update water data by id",
        "parameters": [
          {
            "name": "waterId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the water entry"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Your new water data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWaterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWaterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request | Body must have fields"
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          },
          "404": {
            "description": "Not Found | not valid id | Data not updated"
          }
        }
      },
      "delete": {
        "tags": ["Water"],
        "summary": "Delete water data by id",
        "parameters": [
          {
            "name": "waterId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the water entry"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Water deleted"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized | Authorization header not defined | user not found"
          },
          "404": {
            "description": "Not Found | not valid id | Data not deleted"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["username", "email", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's username",
            "example": "username12345",
            "minLength": 3
          },
          "email": {
            "type": "string",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "pass12345",
            "minLength": 8,
            "maxLength": 64
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's username",
            "example": "username12345"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "SignInRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "pass12345",
            "minLength": 8,
            "maxLength": 64
          }
        }
      },
      "SignInResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token for authentication"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "username": {
                "type": "string",
                "description": "User's username",
                "example": "example_username12345"
              },
              "avatarURL": {
                "type": "string",
                "description": "URL of the user's avatar",
                "example": "example_avatar.png"
              },
              "dailyNorma": {
                "type": "number",
                "description": "User's daily norma",
                "example": 100
              },
              "gender": {
                "type": "string",
                "description": "User's gender",
                "example": "woman"
              }
            }
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Signout succes"
          }
        }
      },
      "GetCurrentResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's username",
            "example": "example_username12345"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "URL of the user's avatar",
            "example": "example_avatar.png"
          },
          "dailyNorma": {
            "type": "number",
            "description": "User's daily norma",
            "example": 100
          },
          "gender": {
            "type": "string",
            "description": "User's gender",
            "example": "woman",
            "enum": ["woman", "man"]
          }
        }
      },
      "UpdateAvatarRequest": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "New username",
            "example": "new_example1234",
            "minLength": 3
          },
          "email": {
            "type": "string",
            "description": "New email",
            "format": "email"
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "minLength": 8,
            "maxLength": 64
          },
          "oldPassword": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64
          },
          "gender": {
            "type": "string",
            "description": "New gender",
            "enum": ["woman", "man"]
          }
        }
      },
      "UserUpdateResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "username": {
            "type": "string",
            "example": "example_username12345",
            "description": "User's username"
          },
          "gender": {
            "type": "string",
            "enum": ["woman", "man"],
            "description": "User's gender"
          }
        }
      },
      "UpdateDailyNormaRequest": {
        "type": "object",
        "required": ["dailyNorma"],
        "properties": {
          "dailyNorma": {
            "type": "number",
            "description": "User's daily norma",
            "example": 200,
            "minimum": 1,
            "maximum": 15000
          }
        }
      },
      "UpdateDailyNormaResponse": {
        "type": "object",
        "properties": {
          "dailyNorma": {
            "type": "number",
            "example": 1500
          }
        }
      },
      "UserWaterDayResponse": {
        "type": "object",
        "properties": {
          "percentDailyNormaUser": {
            "type": "number",
            "description": "Percentage of daily water consumption norm",
            "example": 70
          },
          "userWaterDay": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Unique identifier"
                },
                "waterVolume": {
                  "type": "number",
                  "example": 250
                },
                "date": {
                  "type": "string",
                  "description": "The date and time of the water data"
                }
              }
            }
          }
        }
      },
      "UserWaterMonthResponse": {
        "type": "object",
        "properties": {
          "percentDailyNorm": {
            "type": "number",
            "example": 70
          },
          "consumptionCount": {
            "type": "number",
            "example": 3
          },
          "dailyNorma": {
            "type": "number",
            "example": 1000
          },
          "date": {
            "type": "string",
            "example": "2024-01-01"
          }
        }
      },
      "AddWaterRequest": {
        "type": "object",
        "required": ["waterVolume", "date"],
        "properties": {
          "waterVolume": {
            "type": "number",
            "minimum": 1,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2024-01-17T08:30:45.123Z",
            "pattern": "^d{4}-d{2}-d{2}Td{2}:d{2}:d{2}.d{3}Z$",
            "description": "The date and time of the water data"
          }
        }
      },
      "AddWaterResponse": {
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "number",
            "minimum": 1,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2024-01-17T08:30:45.123Z",
            "pattern": "^d{4}-d{2}-d{2}Td{2}:d{2}:d{2}.d{3}Z$"
          },
          "_id": {
            "type": "string",
            "description": "The owner's ID"
          }
        }
      },
      "UpdateWaterRequest": {
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "number",
            "minimum": 1,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2024-01-17T08:30:45.123Z",
            "pattern": "^d{4}-d{2}-d{2}Td{2}:d{2}:d{2}.d{3}Z$",
            "description": "The date and time of the water data"
          }
        }
      },
      "UpdateWaterResponse": {
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "number",
            "minimum": 1,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2024-01-17T08:30:45.123Z",
            "pattern": "^d{4}-d{2}-d{2}Td{2}:d{2}:d{2}.d{3}Z$",
            "description": "The date and time of the water data"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
